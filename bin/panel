#!/bin/zsh

. panel_colors
. panel_config

# check if panel is already running
if [[ $(pgrep -cx panel) -gt 1 ]]; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

# exit gracefully if terminated
trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

# remove old panel fifo, creat new one
[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

# set up bspwm to not overlap the panel
bspc config top_padding "$PANEL_HEIGHT"

# get bspwms status feed
bspc control --subscribe > "$PANEL_FIFO" &

# window title
# xtitle -sf 'TITLE%s' > "$PANEL_FIFO" &

# clock
while true; do
	# clock icon is \uf017 if you want to add it
	echo -e "TIME$(date +"%l:%M %p") "
	sleep 30;
done > "$PANEL_FIFO" &

# date
while true; do
	# calendar icon is \uf073 if you want to add it
	echo -e "DAY$(date +'%a, %b %d')"
	sleep 60
done > "$PANEL_FIFO" &

# battery
while true; do
    BATT_LEVEL=$(acpi -b | grep -o '[[:digit:]]\+%' | sed 's/%//')
    if [[ $(cat $POWERSUPPLY/online) != 1 ]]; then
    if [[ $BATT_LEVEL -ge 80 ]]; then
		BATT_ICON='\uf240'
	elif [[ $BATT_LEVEL -ge 60 && $BATT_LEVEL -lt 80 ]]; then
		BATT_ICON='\uf241'
	elif [[ $BATT_LEVEL -ge 40 && $BATT_LEVEL -lt 60 ]]; then
		BATT_ICON='\uf242'
	elif [[ $BATT_LEVEL -ge 20 && $BATT_LEVEL -lt 40 ]]; then
		BATT_ICON='\uf243'
	elif [[ $BATT_LEVEL -lt 20 ]]; then
		BATT_ICON='\uf244'
	fi
    else
        BATT_ICON='\uf1e6'
    fi
	#uncomment next and delete the line after that to see percentage
	#echo -e $BATT_ICON $BATT_LEVEL%
	echo -e BAT$BATT_ICON
	sleep 30;
done > "$PANEL_FIFO" &

# alsa volume
while true; do
    ALSA_VOLUME=$(amixer get Master | grep 'Mono: Playback' | grep -o '...%' | sed 's/\[//' | sed 's/%//' | sed 's/ //')
    ALSA_STATE=$(amixer get Master | grep 'Mono: Playback' | grep -o '\[on]')

    if [[ $ALSA_STATE ]]; then
    	if [[ $ALSA_VOLUME -ge 70 ]]; then
    		VOLUME_ICON='\uf028'
    	elif [[ $ALSA_VOLUME -gt 0 && $ALSA_VOLUME -lt 70 ]]; then
    		VOLUME_ICON='\uf027'
    	elif [[ $ALSA_VOLUME -eq 0 ]]; then
	    	VOLUME_ICON='\uf026'
    	else
	    	VOLUME_ICON='\uf026'
    	fi
    	# uncomment next and delte the line after that to see volume percentage
    	#echo -e V$VOLUME_ICON $ALSA_VOLUME
    	echo -e VOL$VOLUME_ICON
    fi
    sleep 2.0
done > "$PANEL_FIFO" &

# weechat (work in progress)
while true; do
	WEECHAT_ICON='\uf0e5'
	echo -e MESSAGE$WEECHAT_ICON
	sleep 60
done > "$PANEL_FIFO" &

# email (work in progress)
while true; do
	EMAIL_ICON='\uf003'
	echo -e EMAIL$EMAIL_ICON
	sleep 60
done > "$PANEL_FIFO" &

# wifi
while true; do
#   WIFI_SSID=$(iw $WIFI_INTERFACE link | grep 'SSID' | sed 's/SSID: //' | sed 's/\t//')
    WIFI_SIGNAL=$(iw "$WIFI_INTERFACE" link | grep 'signal' | sed 's/signal: //' | sed 's/ dBm//' | sed 's/\t//')
	if [[ $(iw "$WIFI_INTERFACE" link) != "Not connected." ]]; then
		if [[ $WIFI_SIGNAL -ge -67 ]]; then
			WIFI_COLOR=$COLOR_SIGNAL_HIGH
		elif [[ $WIFI_SIGNAL -ge -70 && $WIFI_SIGNAL -lt -67 ]]; then
			WIFI_COLOR=$COLOR_SIGNAL_MEDIUM
		elif [[ $WIFI_SIGNAL -ge -80 && $WIFI_SIGNAL -lt -70 ]]; then
			WIFI_COLOR=$COLOR_SIGNAL_LOW
		fi
		echo -e "LINK%{F$WIFI_COLOR}\uf1eb%{F-}"
	else
		WIFI_COLOR=$COLOR_SIGNAL_NONE
		echo -e "LINK%{F$WIFI_COLOR}\uf072%{F-}"
	fi
		sleep 10
done > "$PANEL_FIFO" &

# music controls
while true; do
	SONG_NAME=$(mpc current)
	if [[ -z $(mpc current) ]]; then
		# no music in playlist, or mpd is not running
		echo -e "MUSIC%{F$COLOR_INACTIVE_MONITOR_FG}%{T3}%{A:mpc listall | mpc add; mpc shuffle; mpc play:}%{A3:mpd:}\uf19c  \uf198  \uf17c%{A}%{A}%{T1}%{F-}"
	else
        if mpc status | grep -q 'paused'; then
			# music is paused
			echo -e "MUSIC%{F$COLOR_INACTIVE_MONITOR_FG}%{T3}%{A:mpc prev:}\uf19c %{A}%{A:mpc play:}%{A3:mpc clear:}$SONG_NAME%{A}%{A}%{A:mpc next:} \uf17c%{A}%{T1}%{F-}"
		else
			# music is playing
			echo -e "MUSIC%{F$COLOR_FOCUSED_OCCUPIED_FG}%{T3}%{A:mpc prev:}\uf19c %{A}%{A:mpc pause:}%{A3:mpc clear:}$SONG_NAME%{A}%{A}%{A:mpc next:} \uf17c%{A}%{T1}%{F-}"
		fi
	fi
	sleep 2.0
done > "$PANEL_FIFO" &

# dump panel into panel_bar and then into lemonbar
panel_bar < "$PANEL_FIFO" | lemonbar -g x"$PANEL_HEIGHT" -f "$PANEL_FONT" -f "$ICON_FONT" -f "$ICON_FONT2" -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -u 2 | zsh &

wait
